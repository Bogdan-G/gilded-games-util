buildscript {
    repositories {
        jcenter()

        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }

        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }

    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.0-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'

apply plugin: "maven-publish"

version = "1.8-r1"
group = "com.gildedgames.util"
archivesBaseName = "GildedGamesUtil"

minecraft {
    version = "1.8-11.14.3.1521"
    runDir = "eclipse"

    mappings = "stable_16"
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from (sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from (sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

configurations {
    shade
    compile.extendsFrom shade

    deployerJars
}

dependencies {
    shade 'com.googlecode.efficient-java-matrix-library:ejml:0.25'
    shade 'org.apache.commons:commons-lang3:3.1'
    shade 'org.jgrapht:jgrapht-core:0.9.1'
    shade 'org.luaj:luaj-jme:3.0.1'

    testCompile 'junit:junit:4.11'

    deployerJars "org.apache.maven.wagon:wagon-ssh:2.2"
}

jar {
    manifest {
        attributes 'FMLAT': 'forge_at.cfg', 'FMLCorePlugin': 'com.gildedgames.util.threadedlighting.TLLoadingPlugin', 'FMLCorePluginContainsFMLMod': 'true'
    }

    configurations.shade.each { dep ->
        from(project.zipTree(dep)){
            exclude 'META-INF', 'META-INF/**'
        }
    }
}

task srcJar(type: Jar) {
	from sourceSets.main.allJava

    classifier "sources"
}

task devJar(type: Jar) {
    from sourceSets.main.output

    classifier = "dev"
}


artifacts {
    archives devJar
    archives srcJar
}

uploadArchives {
    if (file("secrets.properties").exists()) {
        repositories {
            mavenDeployer {
                configuration = configurations.deployerJars

                ext.secrets = new Properties()
                secrets.load(new FileInputStream("secrets.properties"))
                
                repository (url: secrets["upload_url"]) {
                    authentication(userName: secrets["username"], password: secrets["password"])
                }

                def jenkinsBuildNum = System.getenv().BUILD_NUMBER

                pom.version = project.version + (jenkinsBuildNum != null ? "_" + jenkinsBuildNum : "")
                pom.artifactId = "util"
            }
        }
    }
}    